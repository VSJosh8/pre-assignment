Metadata-Version: 2.1
Name: web-checker
Version: 1.0
Summary: A web checker that checks that status of a given url and returns response information
Home-page: https://github.com/VSJosh8/pre-assignment
Author: Vincent Joshua Skinner
Author-email: vsjoshua98@gmail.com
License: MIT
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown

# Web checker application

The main source code is web_checker.py which uses the requests library to check the response of eacg url parsed. 

The urls are provided via a text file 'urls.txt' meaning any text file can be used in place of this as long as it passes unit tests for valid urls.

Each response from the web check is printed into a logfile and also to a json file which can be used for the optional web interface to monitor the status of the webpages in the list.

Unit tests validate all inputs to web_checker method.

## Installation

Use the package manager [pip](https://pip.pypa.io/en/stable/) to install setup.py

```bash
pip install .
```

## Usage
```bash
python run.py
```

## Requirements Satisfication
1. URL_LIST from config.py provides the list of URLS an is parsed in web_checker.py using check_url_status()
2. run.py uses loop to run URL_LIST from config.py provides the list of URLS an is parsed in web_checker.py using check_url_status() method to make http request to url provided in list. This request interval can be configured via config.py
3. Webpage contents are parsed and compared with list of "required content" to verify if content requirements are met
4. Request details are returned from URL_LIST from config.py provides the list of URLS an is parsed in web_checker.py using check_url_status() method including request status code, response time, and if content is verified
5.  Result of http check is output into a log file and also a JSON file.
6.  JSON file can be used for http interace to show status of each webpage via API
Unit tests also provided test.py

## Design Question
I could propose implementing multithreading or multiprocessing which can both be implemented in a python application with their respecitve libraries. Similar to this task the IP of multiple geographically distributed locations can be pinged and their status information returned. Multithreading and multiprocessing can allow for multiple processes like these running simultaneously which can reduce the load for each instance thus maintaining performance.

Data can be transfered via TLS as this is more secure that TCP. Similar to this task making HTTP/TCP request we can make TLS requests wit python.

In general the security measures that would come into consideration for monitoring tools would be:
- strong authentication and authorization mechanism
- role based access control
- data protection measures (encryption, masking, etc)
- compliance with data protection laws
- regular updates on monitoring tool to prevent malware
